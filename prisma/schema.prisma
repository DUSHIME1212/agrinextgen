// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SELLER
  ADMIN
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String?
  role        UserRole  @default(CUSTOMER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  address     String?
  phoneNumber String?
  businessName  String?
  contactPerson String?

  products    Product[]
  orders      Order[]
  reviews     Review[]
  wishlist    Wishlist[]
  cart        Cart[]
  payments    Payment[]

  @@map("users")
}

model Product {
  id                  String    @id @default(uuid())
  documentId          String    @unique
  name                String
  price               Float
  productStatus       String
  productDescription  String?
  features            String?
  growingSeason       String?
  sunExposure         String?
  wateringNeeds       String?
  spacing             String?
  harvestTime         String?
  soilRequirements    String?
  plantingDepth       String?
  companions          String?
  SKU                String?
  Brand              String?
  ShelfLife          String?
  Category           String?
  Storage            String?
  Certification      String?
  shippingReturns    String?
  verified           Boolean   @default(false)
  isNew              Boolean   @default(false)
  discount           Float?
  rating             Float     @default(0)
  slug               String    @unique
  sellerId           String
  seller             User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  publishedAt        DateTime?
  productimg         ProductImage[]
  orderItems         OrderItem[]
  reviews            Review[]
  cart               CartItem[]
  wishlist           Wishlist[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("product_images")
}

model Order {
  id              String      @id @default(uuid())
  customerId      String
  customer        User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  status          String      @default("pending")
  totalAmount     Float
  shippingAddress String?
  paymentMethod   String?
  paymentStatus   String      @default("pending")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  payment         Payment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@map("wishlists")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  @@map("cart_items")
}

model Payment {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount      Float
  status      String   @default("pending")
  method      String
  transactionId String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("payments")
}
